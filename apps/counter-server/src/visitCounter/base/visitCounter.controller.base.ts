/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VisitCounterService } from "../visitCounter.service";
import { VisitCounterCreateInput } from "./VisitCounterCreateInput";
import { VisitCounter } from "./VisitCounter";
import { VisitCounterFindManyArgs } from "./VisitCounterFindManyArgs";
import { VisitCounterWhereUniqueInput } from "./VisitCounterWhereUniqueInput";
import { VisitCounterUpdateInput } from "./VisitCounterUpdateInput";

export class VisitCounterControllerBase {
  constructor(protected readonly service: VisitCounterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VisitCounter })
  async createVisitCounter(
    @common.Body() data: VisitCounterCreateInput
  ): Promise<VisitCounter> {
    return await this.service.createVisitCounter({
      data: data,
      select: {
        count: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VisitCounter] })
  @ApiNestedQuery(VisitCounterFindManyArgs)
  async visitCounters(@common.Req() request: Request): Promise<VisitCounter[]> {
    const args = plainToClass(VisitCounterFindManyArgs, request.query);
    return this.service.visitCounters({
      ...args,
      select: {
        count: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VisitCounter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async visitCounter(
    @common.Param() params: VisitCounterWhereUniqueInput
  ): Promise<VisitCounter | null> {
    const result = await this.service.visitCounter({
      where: params,
      select: {
        count: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VisitCounter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVisitCounter(
    @common.Param() params: VisitCounterWhereUniqueInput,
    @common.Body() data: VisitCounterUpdateInput
  ): Promise<VisitCounter | null> {
    try {
      return await this.service.updateVisitCounter({
        where: params,
        data: data,
        select: {
          count: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VisitCounter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVisitCounter(
    @common.Param() params: VisitCounterWhereUniqueInput
  ): Promise<VisitCounter | null> {
    try {
      return await this.service.deleteVisitCounter({
        where: params,
        select: {
          count: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
