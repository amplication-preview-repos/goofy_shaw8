/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VisitCounter } from "./VisitCounter";
import { VisitCounterCountArgs } from "./VisitCounterCountArgs";
import { VisitCounterFindManyArgs } from "./VisitCounterFindManyArgs";
import { VisitCounterFindUniqueArgs } from "./VisitCounterFindUniqueArgs";
import { CreateVisitCounterArgs } from "./CreateVisitCounterArgs";
import { UpdateVisitCounterArgs } from "./UpdateVisitCounterArgs";
import { DeleteVisitCounterArgs } from "./DeleteVisitCounterArgs";
import { VisitCounterService } from "../visitCounter.service";
@graphql.Resolver(() => VisitCounter)
export class VisitCounterResolverBase {
  constructor(protected readonly service: VisitCounterService) {}

  async _visitCountersMeta(
    @graphql.Args() args: VisitCounterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VisitCounter])
  async visitCounters(
    @graphql.Args() args: VisitCounterFindManyArgs
  ): Promise<VisitCounter[]> {
    return this.service.visitCounters(args);
  }

  @graphql.Query(() => VisitCounter, { nullable: true })
  async visitCounter(
    @graphql.Args() args: VisitCounterFindUniqueArgs
  ): Promise<VisitCounter | null> {
    const result = await this.service.visitCounter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VisitCounter)
  async createVisitCounter(
    @graphql.Args() args: CreateVisitCounterArgs
  ): Promise<VisitCounter> {
    return await this.service.createVisitCounter({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VisitCounter)
  async updateVisitCounter(
    @graphql.Args() args: UpdateVisitCounterArgs
  ): Promise<VisitCounter | null> {
    try {
      return await this.service.updateVisitCounter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VisitCounter)
  async deleteVisitCounter(
    @graphql.Args() args: DeleteVisitCounterArgs
  ): Promise<VisitCounter | null> {
    try {
      return await this.service.deleteVisitCounter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
